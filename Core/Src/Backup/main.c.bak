/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "A1_motor_drive.h"
#include "motor_msg.h"
#include "joint.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PI 3.1415926535f
#define DGR2RAD PI/180
#define RAD2DGR 180/PI

#define UP 1
#define MID 3
#define DOWN 2

#define T_MAX 5
#define T_MIN 0
#define D_T 0.002

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

extern motor_send_t MotorA1_send_left;         
extern motor_recv_t Date_left;        
extern motor_recv_t MotorA1_recv_left_id00;   
extern motor_recv_t MotorA1_recv_left_id01;   
extern motor_recv_t MotorA1_recv_left_id02;   
extern uint8_t Date[78];

int j = 0;
int k = 0;

volatile uint8_t tim2_cnt = 0;

float ang = 0.0;
float spd = 0.0;

//路径的时间和长度参数设置


//float tf = 10.0f;
//float xf = -60.0f;
float dt = 0.005;
const int t_num = 1000;
float position[t_num];
float speed[t_num];

uint8_t id = 0;

//typedef struct {
//    float pos_cmd;       // 期望位置(度)
//    float pos_fdb;       // 实际位置(度)
//    float pos_error;     // 位置误差(度)
//    float vel_cmd;       // 期望速度(rad/s)
//    float vel_fdb;       // 实际速度(rad/s)
//    float vel_error;     // 速度误差(rad/s)
//    uint32_t timestamp;  // 时间戳(ms)
//} ErrorData_t;

//ErrorData_t error_buf0[1000];  // 误差数据缓冲区
//ErrorData_t error_buf1[1000];  // 误差数据缓冲区
//uint16_t error_idx = 0;       // 缓冲区索引
//uint8_t data_logging = 0;     // 数据记录使能标志

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void pos_calc(float * pos,float * speed, float xf, float tf)
{
	//float tf = 5;
	float t0 = 0;
	float dt = 0.005;
	int T_num = (int)((tf-t0)/dt);
	
	float delta_x = xf;
	//float a0 = 0;
	float a3 = 10*delta_x/( (tf-t0)*(tf-t0)*(tf-t0) );
	float a4 = -15*delta_x/( (tf-t0)*(tf-t0)*(tf-t0)*(tf-t0) );
	float a5 = 6*delta_x/( (tf-t0)*(tf-t0)*(tf-t0)*(tf-t0)*(tf-t0) );
	
	for (int i = 0;i<T_num;i++)
	{
		float t_now = dt*i;
		pos[i] = a3*(t_now*t_now*t_now) +a4*(t_now*t_now*t_now*t_now) + a5*(t_now*t_now*t_now*t_now*t_now);//角度制位置
		speed[i] = 3*a3*(t_now*t_now) + 4*a4*(t_now*t_now*t_now) + 5*a5*(t_now*t_now*t_now*t_now);
		speed[i] = speed[i]/180.0f*PI;//弧度制速度
	}
	
}

//void calculate_errors(float cmd_pos, float cmd_vel)
//{
//    if (error_idx < t_num)  // 防止缓冲区溢出
//    {
//        // 获取实际反馈值
//        float act_pos0;  // 实际位置(度)
//        float act_vel0;  // 实际速度(rad/s)
//				float act_pos1;  // 实际位置(度)
//        float act_vel1;  // 实际速度(rad/s)
//        
//				act_pos0 = MotorA1_recv_left_id00.Pos - zero_left_ID0;
//				act_vel0 = MotorA1_recv_left_id00.W; 

//				act_pos1 = MotorA1_recv_left_id01.Pos - zero_left_ID1;
//				act_vel1 = MotorA1_recv_left_id01.W; 
//				
//        // 计算误差
//        error_buf0[error_idx].pos_cmd = cmd_pos;
//        error_buf0[error_idx].pos_fdb = act_pos0;
//        error_buf0[error_idx].pos_error = cmd_pos - act_pos0;//目标减去实际值
//        
//        error_buf0[error_idx].vel_cmd = cmd_vel;
//        error_buf0[error_idx].vel_fdb = act_vel0;
//        error_buf0[error_idx].vel_error = cmd_vel - act_vel0;//目标减去实际值
//        
//        error_buf0[error_idx].timestamp = HAL_GetTick();  // 记录时间戳
//        
//				// 计算误差
//        error_buf1[error_idx].pos_cmd = cmd_pos;
//        error_buf1[error_idx].pos_fdb = act_pos1;
//        error_buf1[error_idx].pos_error = cmd_pos - act_pos1;//目标减去实际值
//        
//        error_buf1[error_idx].vel_cmd = cmd_vel;
//        error_buf1[error_idx].vel_fdb = act_vel1;
//        error_buf1[error_idx].vel_error = cmd_vel - act_vel1;//目标减去实际值
//        
//        error_buf1[error_idx].timestamp = HAL_GetTick();  // 记录时间戳
//				
//        error_idx++;
//    }
//}



//--------------------------------------------------
void pos_spline(float * pos,float xf,float tf)
{

	if (j < t_num)
		{
			if ((j == 0) &&(k == 0))
			{
				pos_calc(pos,speed,xf,tf);
//				data_logging = 1;  // 开始记录数据
//				error_idx = 0;     // 重置缓冲区
			}
			
//			float* zero_point = NULL;
//			
//			if (id == 0)
//			{
//				zero_point = &zero_left_ID0;
//			}
//			else if (id == 1)
//			{
//				zero_point = &zero_left_ID1;
//			}
				
			
			while((zero_left_ID0*zero_left_ID0 <= 0.000000000001f) || (zero_left_ID1*zero_left_ID1 <= 0.000000000001f))
			{
				//以上电位置为零点
				modify_torque_cmd(&MotorA1_send_left, 0, 0);   
				unitreeA1_rxtx(&huart1);
				modify_torque_cmd(&MotorA1_send_left, 1, 0);   
				unitreeA1_rxtx(&huart1);
				
				zero_left_ID0  = (float) MotorA1_recv_left_id00.Pos ;
				zero_left_ID1  = (float) MotorA1_recv_left_id01.Pos ;

				HAL_Delay(1);
			}
			
			
			if (k < 1)
			{
				Joint_PW_Control(position[j],speed[j],0,0.022f,0.1f);//0.025 1.0   0.015 0.3
				Joint_PW_Control(position[j],speed[j],1,0.022f,0.1f);//0.025 1.0   0.015 0.3
				//Joint_Position_Control(position[j],0.022f,1.0f);//0.025 1.0
				// 计算并记录误差
				
//				HAL_Delay(1);
//				Joint_PW_Control(position[j],speed[j],0.006f,0.50f);
//				if (data_logging)
//				{
//						calculate_errors(position[j], speed[j]);
//				}
				
//				if (id == 0)
//				{
//					ang = (float) MotorA1_recv_left_id00.Pos - zero_left_ID0;
//					spd = MotorA1_recv_left_id00.W - MotorA1_send_left.W;
//				}
//				else if(id == 1)
//				{
//					ang = (float) MotorA1_recv_left_id01.Pos - zero_left_ID1;
//					spd = MotorA1_recv_left_id01.W - MotorA1_send_left.W;
//				}
				k++;
				HAL_Delay(5);
			}
			else
			{
				j++;
				k = 0;
				HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_10);
			}
		}
		else
		{
			modify_torque_cmd(&MotorA1_send_left, 0, 0);    
			unitreeA1_rxtx(&huart1);   
			modify_torque_cmd(&MotorA1_send_left, 1, 0);    
			unitreeA1_rxtx(&huart1);               			
//				if (id == 0)
//				{
//					ang = (float) MotorA1_recv_left_id00.Pos - zero_left_ID0;
//					spd = MotorA1_recv_left_id00.W - MotorA1_send_left.W;
//				}
//				else if(id == 1)
//				{
//					ang = (float) MotorA1_recv_left_id01.Pos - zero_left_ID1;
//					spd = MotorA1_recv_left_id01.W - MotorA1_send_left.W;
//				}
//			if (data_logging)
//			{
//					data_logging = 0;  // 停止记录
//			}
		}
}

void step(float pos,float kp,float kd)
{
	if (j < t_num)
		{
			if (j == 0)
			{
//				data_logging = 1;  // 开始记录数据
//				error_idx = 0;     // 重置缓冲区
			}
			while((zero_left_ID0*zero_left_ID0) <= 0.000000000001f)
			{
				//以上电位置为零点
				modify_torque_cmd(&MotorA1_send_left, 0, 0);   
				unitreeA1_rxtx(&huart1);
				zero_left_ID0  = (float) MotorA1_recv_left_id00.Pos ;
				HAL_Delay(1);
			}
			
			//Joint_PW_Control(position[j],speed[j],0.025f,0.5f);//0.025 1.0
			Joint_Position_Control(pos,kp,kd);//0.025 1.0
			// 计算并记录误差
//			if (data_logging)
//			{
//					calculate_errors(position[j], speed[j]);
//			}
			ang = (float) MotorA1_recv_left_id00.Pos - zero_left_ID0;
			spd = MotorA1_recv_left_id00.W - MotorA1_send_left.W;
			HAL_Delay(1);
			j++;
		}
		else
		{
			modify_torque_cmd(&MotorA1_send_left, 0, 0);    
			unitreeA1_rxtx(&huart1);               
			ang = (float) MotorA1_recv_left_id00.Pos - zero_left_ID0;
			spd = MotorA1_recv_left_id00.W - MotorA1_send_left.W;
			
//			if (data_logging)
//			{
//					data_logging = 0;  // 停止记录
//			}
		}
}





/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	
	//Joint_Zero_init_Type1();

//	modify_torque_cmd(&MotorA1_send_left, 0, 0);   
//	unitreeA1_rxtx(&huart1);
//	HAL_Delay(100);
//	zero_left_ID0  = (float) MotorA1_recv_left_id00.Pos ;
//	pos_calc(position,-120.0f,10.0f);

	j = 0;
	k = 0;
//	pos_calc(position,speed,360.0f,5.0f);
//	data_logging = 1;  // 开始记录数据
//	error_idx = 0;     // 重置缓冲区
	
	//while((zero_left_ID0*zero_left_ID0 <= 0.000000000001f) || (zero_left_ID1*zero_left_ID1 <= 0.000000000001f))
//	while((zero_left_ID0*zero_left_ID0 <= 0.000000000001f))
//	{
//		//以上电位置为零点
//		modify_torque_cmd(&MotorA1_send_left, 0, 0);   
//		unitreeA1_rxtx(&huart1);
////		modify_torque_cmd(&MotorA1_send_left, 1, 0);   
////		unitreeA1_rxtx(&huart1);

//		zero_left_ID0  = (float) MotorA1_recv_left_id00.Pos ;
////		zero_left_ID1  = (float) MotorA1_recv_left_id01.Pos ;

	
	
//  HAL_TIM_Base_Start_IT(&htim2);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		

		
		pos_spline(position,60.0f,5.0f);//pos xf tf
		
		//step(30.0f,0.006f,0.5f);
		//kp0 = 0.0025 
		
//		modify_torque_cmd(&MotorA1_send_left,0,0);
//		unitreeA1_rxtx(&huart1);     
//		modify_torque_cmd(&MotorA1_send_left,1,0);
//		unitreeA1_rxtx(&huart1);     
		//HAL_Delay(1);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
  {
		
	}

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
